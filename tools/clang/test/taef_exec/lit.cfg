# -*- Python -*-

# Configuration file for the 'lit' test runner.

import os
import platform

import lit.formats
import lit.util

# name: The name of this test suite.
config.name = 'clang-taef-exec'

# Check that the object root is known.
te = getattr(config, 'te', None)
if te is None:
    # Otherwise, we haven't loaded the site specific configuration (the user is
    # probably trying to run on a test file directly, and either the site
    # configuration hasn't been created by the build system, or we are in an
    # out-of-tree build situation).

    # Check for 'clang_taef_exec_site_config' user parameter, and use that if available.
    site_cfg = lit_config.params.get('clang_taef_exec_site_config', None)
    if site_cfg and os.path.exists(site_cfg):
        lit_config.load_config(config, site_cfg)
        raise SystemExit

# TAEF only runs on Windows
if platform.system() != 'Windows':
  config.unsupported = True
else:
  test_dll = os.path.join(config.llvm_obj_root, config.llvm_build_mode, 'bin', 'ExecHLSLTests.dll')

  hlsl_data_dir = os.path.join(config.llvm_src_root, 'tools', 'clang', 'unittests', 'HLSLExec')

  test_dir = os.path.join(config.llvm_obj_root, config.llvm_build_mode, 'test')
  param_hlsl_data_dir = str.format('/p:HlslDataDir={}', hlsl_data_dir)

  extra_params = ["/p:\"ExperimentalShaders=*\"", param_hlsl_data_dir]

  verbose = lit_config.params.get('verbose', None)
  if verbose == None:
      extra_params.append('/logOutput:LowWithConsoleBuffering')

  arch = getattr(config, 'taef_arch', None)
  arch_filter = str.format("@Architecture='{}'", arch)
  priority_filter = "@Priority<2"
  exec_future = lit_config.params.get('exec_future', None)
  if exec_future:
      priority_filter = "@Priority=2"

  select_filter = str.format("/select:\"{} AND {}\"", priority_filter, arch_filter)
  extra_params.append(select_filter)

  adapter = lit_config.params.get('adapter', None)
  if adapter:
    extra_params.append(str.format("/p:Adapter={}", adapter))

  agility_sdk = lit_config.params.get('agility_sdk', None)
  if agility_sdk:
    extra_params.append("/p:D3D12SDKVersion=1")

  # use ';' to split multiple params.
  taef_extra_params = lit_config.params.get('taef_exec_extra_params', None)
  if taef_extra_params:
    extra_params.extend(taef_extra_params.split(';'))

  config.test_format = lit.formats.TaefTest(config.te, test_dll, test_dir, extra_params)
