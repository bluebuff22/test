
import os
import platform
import re
import subprocess
import tempfile

import lit.formats
import lit.util

config.name = 'hlsl-cmds'


# Check that the object root is known.
llvm_obj_root = getattr(config, 'llvm_obj_root', None)
if llvm_obj_root is None:
    # Otherwise, we haven't loaded the site specific configuration (the user is
    # probably trying to run on a test file directly, and either the site
    # configuration hasn't been created by the build system, or we are in an
    # out-of-tree build situation).

    # Check for 'clang_unit_site_config' user parameter, and use that if available.
    site_cfg = lit_config.params.get('clang_hlsl_cmds_site_config', None)
    if site_cfg and os.path.exists(site_cfg):
        lit_config.load_config(config, site_cfg)
        raise SystemExit

if config.spirv:
    config.available_features.add("spirv")
else:
    config.available_features.add("nospirv")


bin_dir = os.path.join(config.llvm_obj_root, lit_config.params['build_mode'], 'bin')
dxc_bin = os.path.join(bin_dir, 'dxc.exe')

config.environment['PATH'] = str.format('{};{}',config.environment['PATH'], bin_dir)

config.substitutions.append( ('%dxc',
                            dxc_bin ))

config.substitutions.append( ('%batch',
                            'dxc_batch' ))

config.substitutions.append( ('%dxv',
                            'dxv' ))

config.substitutions.append( ('%dxa',
                            'dxa' ))

# Displaying the parent directory of the script
cur_dir = os.path.dirname(__file__)
echo_bat = os.path.join(cur_dir, "echo.bat")
del_bat = os.path.join(cur_dir, "del.bat")

config.substitutions.append( ('%echo',
                            echo_bat ))
config.substitutions.append( ('%del',
                            del_bat ))

config.substitutions.append( ('%opt',
                            'dxopt' ))

config.substitutions.append( ('%dxr',
                            'dxr' ))

config.substitutions.append( ('%listparts',
                            'dxa -listparts ' ))

config.substitutions.append( ('%dxl',
                            'dxl' ))

config.substitutions.append( ('%dxilver',
                            '1.2' ))


# Choose between lit's internal shell pipeline runner and a real shell.  If
# LIT_USE_INTERNAL_SHELL is in the environment, we use that as an override.
use_lit_shell = os.environ.get("LIT_USE_INTERNAL_SHELL")
if use_lit_shell:
    # 0 is external, "" is default, and everything else is internal.
    execute_external = (use_lit_shell == "0")
else:
    # Otherwise we default to internal on Windows and external elsewhere, as
    # bash on Windows is usually very slow.
    execute_external = (not sys.platform in ['win32'])

config.test_format = lit.formats.ShTest(execute_external)

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.test']
